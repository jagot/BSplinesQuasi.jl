var documenterSearchIndex = {"docs":
[{"location":"differentiation/#Differentiating-functions-1","page":"Differentiating functions","title":"Differentiating functions","text":"","category":"section"},{"location":"differentiation/#","page":"Differentiating functions","title":"Differentiating functions","text":"We proceed as indicated in Solving equations:","category":"page"},{"location":"differentiation/#","page":"Differentiating functions","title":"Differentiating functions","text":"julia> function find_second_derivative(B, f::Function)\n           S = B'B\n           D = Derivative(axes(B,1))\n           ∇² = B'D'D*B\n\n           # Project function onto B-spline basis\n           cf = B \\ f\n           # Find derivative\n           cg = S \\ ∇²*cf\n\n           cf,cg\n       end\nfind_second_derivative (generic function with 1 method)\n\njulia> t = LinearKnotSet(10, 0, 10, 30);\n\njulia> B = BSpline(t)[:,2:end-1]\nBSpline{Float64} basis with LinearKnotSet(Float64) of order k = 10 on 0.0..10.0 (30 intervals), restricted to basis functions 2..38 ⊂ 1..39","category":"page"},{"location":"differentiation/#","page":"Differentiating functions","title":"Differentiating functions","text":"Until other boundary conditions are implemented, second order derivatives can only be reliably computed for functions which vanish on the boundaries:","category":"page"},{"location":"differentiation/#","page":"Differentiating functions","title":"Differentiating functions","text":"julia> cf,cg = find_second_derivative(B, x -> sin(2π*x))\n([0.233234, 0.695737, 1.29447, 1.39553, -0.243123, -3.89321, 0.674553, 5.76264, -5.77088, -0.0104052  …  0.0104052, 5.77088, -5.76264, -0.674553, 3.89321, 0.243123, -1.39553, -1.29447, -0.695737, -0.233234], [-9.54927, -26.7923, -52.0097, -54.1103, 8.69076, 154.459, -27.2137, -227.101, 227.581, 0.568577  …  -0.568577, -227.581, 227.101, 27.2137, -154.459, -8.69076, 54.1103, 52.0097, 26.7923, 9.54927])","category":"page"},{"location":"differentiation/#","page":"Differentiating functions","title":"Differentiating functions","text":"(Image: Derivative of sine function)","category":"page"},{"location":"splines/#Spline-creation-and-evaluation-1","page":"Spline creation & evaluation","title":"Spline creation & evaluation","text":"","category":"section"},{"location":"splines/#","page":"Spline creation & evaluation","title":"Spline creation & evaluation","text":"A spline is constructed as a linear combination of B-splines:","category":"page"},{"location":"splines/#","page":"Spline creation & evaluation","title":"Spline creation & evaluation","text":"beginequation\nlabeleqnspline\ns(x) = sum_j=1^n_tk Bjk(x)c_j defd Bvecc\nendequation","category":"page"},{"location":"splines/#","page":"Spline creation & evaluation","title":"Spline creation & evaluation","text":"This is easily done as","category":"page"},{"location":"splines/#","page":"Spline creation & evaluation","title":"Spline creation & evaluation","text":"julia> k = 4\n4\n\njulia> t = LinearKnotSet(k, 0, 1, 5)\n12-element LinearKnotSet{4,4,4,Float64,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}:\n 0.0\n 0.0\n 0.0\n 0.0\n 0.2\n 0.4\n 0.6\n 0.8\n 1.0\n 1.0\n 1.0\n 1.0\n\njulia> B = BSpline(t)\nBSpline{Float64} basis with LinearKnotSet(Float64) of order k = 4 (cubic) on 0.0..1.0 (5 intervals)\n\njulia> size(B)\n(ContinuumArrays.AlephInfinity{1}(), 8)\n\njulia> c = sin.(1:size(B,2))\n8-element Array{Float64,1}:\n  0.8414709848078965\n  0.9092974268256817\n  0.1411200080598672\n -0.7568024953079282\n -0.9589242746631385\n -0.27941549819892586\n  0.6569865987187891\n  0.9893582466233818\n\njulia> s = B*c\nSpline on BSpline{Float64} basis with LinearKnotSet(Float64) of order k = 4 (cubic) on 0.0..1.0 (5 intervals)","category":"page"},{"location":"splines/#","page":"Spline creation & evaluation","title":"Spline creation & evaluation","text":"Naturally, we can evaluate the spline similarly to above:","category":"page"},{"location":"splines/#","page":"Spline creation & evaluation","title":"Spline creation & evaluation","text":"julia> s[0.3]\n-0.28804656969083225\n\njulia> s[0.3:0.1:0.8]\n6-element Array{Float64,1}:\n -0.28804656969083225\n -0.6408357079724976\n -0.8250002333223664\n -0.8119858486932346\n -0.5856964504991202\n -0.15856643671353235","category":"page"},{"location":"splines/#","page":"Spline creation & evaluation","title":"Spline creation & evaluation","text":"If many different splines sharing the same B-splines are going to be evaluated, it is usually more efficient to evaluate the basis functions once and reuse them:","category":"page"},{"location":"splines/#","page":"Spline creation & evaluation","title":"Spline creation & evaluation","text":"julia> χ = B[0:0.25:1.0, :]\n5×8 SparseArrays.SparseMatrixCSC{Float64,Int64} with 14 stored entries:\n  [1, 1]  =  1.0\n  [2, 2]  =  0.105469\n  [2, 3]  =  0.576823\n  [3, 3]  =  0.0208333\n  [2, 4]  =  0.315104\n  [3, 4]  =  0.479167\n  [4, 4]  =  0.00260417\n  [2, 5]  =  0.00260417\n  [3, 5]  =  0.479167\n  [4, 5]  =  0.315104\n  [3, 6]  =  0.0208333\n  [4, 6]  =  0.576823\n  [4, 7]  =  0.105469\n  [5, 8]  =  1.0\n\njulia> χ*c\n5-element Array{Float64,1}:\n  0.8414709848078965\n -0.06366510061255656\n -0.8250002333223664\n -0.39601358159504896\n  0.9893582466233818","category":"page"},{"location":"splines/#","page":"Spline creation & evaluation","title":"Spline creation & evaluation","text":"(Image: One-dimensional spline)","category":"page"},{"location":"splines/#","page":"Spline creation & evaluation","title":"Spline creation & evaluation","text":"It is then trivial to extend this to two dimensions:","category":"page"},{"location":"splines/#","page":"Spline creation & evaluation","title":"Spline creation & evaluation","text":"julia> c̃ = [sin.(1:size(B,2)) tan.(1:size(B,2))]\n8×2 Array{Float64,2}:\n  0.841471   1.55741\n  0.909297  -2.18504\n  0.14112   -0.142547\n -0.756802   1.15782\n -0.958924  -3.38052\n -0.279415  -0.291006\n  0.656987   0.871448\n  0.989358  -6.79971\n\njulia> s̃ = B*c̃\n2d spline on BSpline{Float64} basis with LinearKnotSet(Float64) of order k = 4 (cubic) on 0.0..1.0 (5 intervals)\n\njulia> size(s̃)\n(ContinuumArrays.AlephInfinity{1}(), 2)","category":"page"},{"location":"splines/#","page":"Spline creation & evaluation","title":"Spline creation & evaluation","text":"(Image: Two-dimensional spline)","category":"page"},{"location":"splines/#Reference-1","page":"Spline creation & evaluation","title":"Reference","text":"","category":"section"},{"location":"splines/#","page":"Spline creation & evaluation","title":"Spline creation & evaluation","text":"BSpline","category":"page"},{"location":"splines/#BSplinesQuasi.BSpline","page":"Spline creation & evaluation","title":"BSplinesQuasi.BSpline","text":"BSpline(t, x, w, B, S)\n\nBasis structure for the B-splines generated by the knot set t. x and w are the associated quadrature roots and weights, respectively, the columns of B correspond to the B-splines resolved on the quadrature roots, and S is the (banded) B-spline overlap matrix.\n\n\n\n\n\n","category":"type"},{"location":"theory/#Theory-1","page":"Theory","title":"Theory","text":"","category":"section"},{"location":"theory/#","page":"Theory","title":"Theory","text":"The underlying equations for the definition and efficient evaluation of B-splines are introduced. Equations labelled (dB.A.ij) refer to equation (ij) in chapter A of","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"Carl de Boor (2001). A Practical Guide to Splines. New York: Springer. ISBN: 978-0-387-95366-3.","category":"page"},{"location":"theory/#Definitions-1","page":"Theory","title":"Definitions","text":"","category":"section"},{"location":"theory/#","page":"Theory","title":"Theory","text":"The order of the polynomial is designated k, equal to the degree + 1, i.e. a parabolic polynomial is of order 3.","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"The B-splines can be defined through the Cox–de Boor recursion relation: beginequation tagdBIX14 Bjk defd omega_jkBjk-1 + (1-omega_j+1k)Bj+1k-1 endequation where beginequation tagdBIX15 omega_jk(x) defd fracx-t_jt_j+k-1-t_j endequation and beginequation tagdBIX11 Br1(x) = begincases 1  xin t_rt_r+1)\n0  textrmelse\nendcasesquad rin1n_t-1 endequation","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"Given a knot vector vect of length n_t, there are n_tkdefd n_t-k functions of order k. This implies that there is a highest order k a given knot set vector can support, i.e. k_textrmmax = n_t - 1.","category":"page"},{"location":"theory/#Knot-sets-1","page":"Theory","title":"Knot sets","text":"","category":"section"},{"location":"theory/#","page":"Theory","title":"Theory","text":"As seen above, the B-splines are completely defined by the knot set vector vect.","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"The knot set vect=bmat123456 gives rise to the following cardinal splines, of orders k=15: (Image: Cardinal splines)","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"By increasing the multiplicity of some knots, the continuity of the splines can be controlled. E.g. the knot set vect=bmat01134666, will yield the following splines: (Image: Discontinuous splines)","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"Lastly, it is very common to pad the knot set such that the first and last knot have multiplicity k; this simplifies the implementation of boundary conditions when B-splines are used for solving differential equations: (Image: Full multiplicity splines)","category":"page"},{"location":"theory/#de-Boor's-algorithm-1","page":"Theory","title":"de Boor's algorithm","text":"","category":"section"},{"location":"theory/#","page":"Theory","title":"Theory","text":"An efficient way of evaluating the B-splines is given by de Boor's algorithm. The algorithm described in the Wikipedia article [1] assumes full multiplicity at the endpoints of the knot set, i.e. that the first and last points are repeated k times. In the description of the same algorithm, de Boor additionally assumes a strictly increasing knot set, i.e. t_i+1t_i, do avoid any divisions by zero. Since one of the goals for this package is maximum flexibility in choosing the knot set, a derivation of an only slightly more general version of de Boor's algorithm follows.","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"Given a knot set vect of length n_t, the spline f(x) is given by beginequation tagdBX23⅓  ⅔ beginaligned f(x) = sum_r=1^n_t-k alpha_r Brk(x)\n= sum_r=1^n_t-k alpha_rfracx-t_rt_r+k-1-t_rBrk-1(x)+ sum_r=1^n_t-k alpha_rfract_r+k-xt_r+k-t_r+1Br+1k-1(x)\n= sum_r=1^n_t-k alpha_rfracx-t_rt_r+k-1-t_rBrk-1(x)+ sum_r=2^n_t-k+1 alpha_r-1fract_r+k-1-xt_r+k-1-t_rBrk-1(x)\n= fracx-t_1t_k-t_1alpha_1B1k-1(x) + left sum_r=2^n_t-k frac(x-t_r)alpha_r+(t_r+k-1-x)alpha_r-1t_r+k-1-t_rBrk-1(x) right + fract_n_t-xt_n_t-t_n_t-k+1alpha_n_t-kBn_t-k+1k-1(x)\n= sum_i=1^n_t-k+1 alpha_i^2(x) Bik-1(x) endaligned endequation where beginequation tagdBX24 alpha_r^2(x) defd begincases displaystyle fracx-t_1t_k-t_1alpha_1  r=12ex displaystyle frac(x-t_r)alpha_r+(t_r+k-1-x)alpha_r-1t_r+k-1-t_r  rin2n_t-k2ex displaystyle fract_n_t-xt_n_t-t_n_t-k+1alpha_n_t-k  r = n_t - k + 1 endcases endequation We have thus reexpressed the spline function f(x) of order k as a linear combination of B-splines of order k-1. We can generalize this, to reexpress f(x) as a linear combination of B-splines of order k-j, with expansion coefficients beginequation labeleqndBX26 tagdBX26 alpha_r^j+1(x) defd begincases displaystyle fracx-t_1t_1+k-j-t_1alpha_1^j(x)  r=12ex displaystyle frac(x-t_r)alpha_r^j(x)+(t_r+k-j-x)alpha_r-1^j(x)t_r+k-j-t_r  rin2n_t-k+j-12ex displaystyle fract_n_t-xt_n_t-t_n_t-k+jalpha_n_t-k+j-1^j(x)  r = n_t - k + j endcases endequation","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"The difference between this derivation and those in the Wikipedia article and de Boor (2001), is that we here explicitly consider the limits of the sum imposed by the length of the knot set and the order k; this introduces the special cases for r=1n_t-k+j.","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"An important philosophical difference between the Cox–de Boor recursion relation and de Boor's algorithm, is that whereas the former is a linear combination of basis functions evaluated at certain position x, the latter is linear combination of intervals (since the first-order functions Bj1 are non-zero within one interval only, and they are mutual orthogonal), with polynomial expansion coefficients alpha_i^k(x). To evaluate the spline function f(x), we first find the interval i which contains x. Even if the knot set is only non-decreasing, i.e. not strictly increasing, the interval containing x is uniquely defined, since there is only one for which t_i leq x  t_i+1; if the knot t_i has a multiplicity higher than unity, the additional intervals cannot contain x, since they are empty: t_i-1leq x  t_i = varnothing if t_i-1 = t_i. By finding the last i, for which t_i leq x, we thus guarantee that no divisions by zero will occur.","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"[1]: NB that the Wikipedia article uses 0-based indexing, whereas de Boor and BSplinesQuasi.jl use 1-based indexing.","category":"page"},{"location":"theory/#Integrals-1","page":"Theory","title":"Integrals","text":"","category":"section"},{"location":"theory/#","page":"Theory","title":"Theory","text":"Since the B-splines are piecewise polynomials, they can be exactly integrated using Gauß–Legendre quadrature; an N-point quadrature can integrate a polynomial of degree 2N-1 exactly. We are usually interested in integrals on the form","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"beginequation\nmatrixelBj_1koperatorABj_2kequiv\nintdiffx\nconjBj_1k(x)\noperatorA\nBj_2k(x)\nendequation","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"where operatorA is some operator. Assuming that operatorA can be approximated by a polynomial of order k, we need an N-point quadrature, such that 2N-1geq 2(k-1)+(k-1), e.g. for operatorAsim x^2, we choose N=ceilfrac2k+12=k+1.","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"For every non-empty interval generated by the knot set, we setup a Gauß–Legendre quadrature, such that an integral is approximated as","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"beginequation\nintlimits_a^b diffxf(x)approx\nfracb-a2sum_i=1^n w_i\nfleft(fracb-a2x_i+fraca+b2right)\nendequation","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"within each interval.","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"If we again consider the knot set vect=bmat01134666 and allow operators of maximal polynomial order k=3, we get the following distribution quadrature points:","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"(Image: Quadrature points)","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"Note that no quadrature points were generated for the intervals t_it_i+1), i=267, since those intervals are empty. Also note that the quadrature points are interior, i.e. the domain boundaries are not included. That can be useful for dealing with functions which are singular/undefined at the boundaries.","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"With the quadrature in place, it becomes very easy to compute the overlap matrix:","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"beginequation\nmatS_ijk defd braketBikBjk\napprox sum_l w_l conjBik(x_l) Bjk(x_l)\nendequation","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"For the knot set above, we find","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"matS =\nbmat06        0222222    00444444   00         00\n 0222222   0466667    0307407    00037037   00\n 00444444   0307407    0962963    0307407    00444444\n 00        00037037   0307407    0466667    0222222\n 00        00         00444444   0222222    04","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"from which we see that the individual B-splines Bik are non-zero only on the interval t_it_i+k), except for the last B-spline that is non-zero also at the end of the interval, t_it_i+k.","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"If we want to employ two B-spline sets of different orders, we must make sure they share the same knot set and quadrature points (and that the latter support the combined polynomial order).","category":"page"},{"location":"theory/#Derivatives-1","page":"Theory","title":"Derivatives","text":"","category":"section"},{"location":"theory/#","page":"Theory","title":"Theory","text":"A property of B-splines is that the first derivative of a spline is given by","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"beginequation\ntagdBX12\npartial\nsum_j alpha_jBjk =\n(k-1)sum_j\nfracalpha_j - alpha_j-1t_j+k-1-t_jBjk-1\nendequation","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"and by extension","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"beginequation\ntagdBX15\npartial^m\nsum_j alpha_jBjk =\nsum_j alpha_j^(m+1)Bjj-m\nendequation","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"where","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"beginequation\nlabeleqndBX16\ntagdBX16\nalpha_j^(m+1) defd\nbegincases\nalpha_r  m = 02ex\ndisplaystyle\nfracalpha_r^(m) - alpha_r-1^(m)(t_r+k-1-t_r)(k-m)  m  0\nendcases\nendequation","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"Comparing with de Boor's algorithm, above, eqrefeqndBX16 is very similar in structure to eqrefeqndBX26, which means for calculating the mth derivative, we can apply eqrefeqndBX16 for jin1m, and then switch to eqrefeqndBX26 for jinm+1k-1.","category":"page"},{"location":"theory/#Solving-equations-1","page":"Theory","title":"Solving equations","text":"","category":"section"},{"location":"theory/#","page":"Theory","title":"Theory","text":"For any equation of the form","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"beginequation\noperatorLf = g\nendequation","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"where operatorL is a linear functional, we can solve the equation approximately by expanding f and g in terms of B-splines:","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"beginequation\nbeginaligned\nf = sum_j ketBjkf_j defd Bvecf\ng = sum_j ketBjkg_j defd Bvecg\nendaligned\nendequation","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"where","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"beginequation\nB defd bmatketB1k  ketB2k  dots  ketBnk\nendequation","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"The equation is now transformed to","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"beginequation\noperatorLBvecf = Bvecg\nendequation","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"The left-hand side is trivially in the space spaceP_tk, whereas is not necessary true for the right-hand side, i.e. the functional operatorL may take f out of the space. We can project the equation into the space spaceP_tk by left-multiplying by the projector BB^H:","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"beginequation\nbeginaligned\nBB^HoperatorLBvecf = BB^HBvecg\niff\nBmatLvecf = BmatSvecg\nendaligned\nendequation","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"where","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"beginaligned\nmatL defd B^HoperatorLB\nmatS defd B^HB\nendaligned","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"Since, although the B-splines are non-orthogonal, they are linearly independent, the equation has to hold for any ketBik, and we get","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"beginequation\nmatLvecf = matSvecg\nendequation","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"If for instance, g=lambda f, we get","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"beginequation\n(matL-lambdamatS)vecf = 0\nendequation","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"which is a generalized eigenvalue problem, which can be solved using e.g. ArnoldiMethod.jl.","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"If instead we want to calculate a derivative of f, i.e. operatorL=partial^m, we find the vector of expansion coefficients for g as","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"beginequation\nvecg = matS^-1matD^(m)vecf\nendequation","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"where matD^(m) defd B^Hpartial^mB, the elements of which are calculated according to Derivatives.","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"Finally, if we want to solve a boundary-value problem, the solution is given by","category":"page"},{"location":"theory/#","page":"Theory","title":"Theory","text":"beginequation\nvecf = matL^-1matSvecg\nendequation","category":"page"},{"location":"odes/#Ordinary-differential-equations-1","page":"Ordinary differential equations","title":"Ordinary differential equations","text":"","category":"section"},{"location":"odes/#","page":"Ordinary differential equations","title":"Ordinary differential equations","text":"It is easy to solve ordinary differential equations using B-splines, as long as they are linear. For non-linear ODEs, the simplest way is most likely to linearize the equations, solve the resulting equation system (as illustrated below), and combining this with fixed-point iteration or Newton's method.","category":"page"},{"location":"odes/#Hooke's-law-1","page":"Ordinary differential equations","title":"Hooke's law","text":"","category":"section"},{"location":"odes/#","page":"Ordinary differential equations","title":"Ordinary differential equations","text":"A spring that is extended from its equilibrium point by x experiences a restoring force","category":"page"},{"location":"odes/#","page":"Ordinary differential equations","title":"Ordinary differential equations","text":"beginequation\nF = -kx\nendequation","category":"page"},{"location":"odes/#","page":"Ordinary differential equations","title":"Ordinary differential equations","text":"where k is the spring constant. The potential energy of the spring is related to the force as","category":"page"},{"location":"odes/#","page":"Ordinary differential equations","title":"Ordinary differential equations","text":"beginequation\nF = -nabla V(x)\nendequation","category":"page"},{"location":"odes/#","page":"Ordinary differential equations","title":"Ordinary differential equations","text":"We can find this potential by solving a boundary value problem, expanding F in B-splines. Since we do not know the values of V(x) at the edges of the domain, we can employ the fact that the restoring force is antisymmetric and that V(0)=0, and solve the problem on the half-domain 0x_textrmmax. This turns the problem into an initial-value problem.","category":"page"},{"location":"odes/#","page":"Ordinary differential equations","title":"Ordinary differential equations","text":"We proceed as indicted in Solving equations:","category":"page"},{"location":"odes/#","page":"Ordinary differential equations","title":"Ordinary differential equations","text":"julia> function ode_hookes_law(xₘₐₓ, kspring, k, N)\n           t = LinearKnotSet(k, 0, xₘₐₓ, N)\n           # By omitting the first basis function, we enforce V(0) = 0\n           B = BSpline(t,0)[:,2:end]\n           S = B'B\n\n           D = Derivative(axes(B, 1))\n           ∇ = B'D*B\n\n           # Hooke's law\n           F = x -> -kspring*x\n\n           # Expand Hooke's law on B-splines\n           cF = B \\ F\n           # Solve for expansion coefficients of potential\n           cV = -∇ \\ S*cF\n\n           cF,cV\n       end\n\njulia> cF,cV = ode_hookes_law(3, 0.1, 7, 30)\n([-0.00166667, -0.005, -0.01, -0.0166667, -0.025, -0.035, -0.045, -0.055, -0.065, -0.075  …  -0.235, -0.245, -0.255, -0.265, -0.275, -0.283333, -0.29, -0.295, -0.298333, -0.3], [1.02078e-16, 6.66667e-5, 0.000366667, 0.00116667, 0.00283333, 0.00583333, 0.00983333, 0.0148333, 0.0208333, 0.0278333  …  0.275833, 0.299833, 0.324833, 0.350833, 0.377833, 0.401167, 0.420367, 0.435067, 0.445, 0.45])","category":"page"},{"location":"odes/#","page":"Ordinary differential equations","title":"Ordinary differential equations","text":"We can compare the approximation with the exact potential, given by","category":"page"},{"location":"odes/#","page":"Ordinary differential equations","title":"Ordinary differential equations","text":"beginequation\nV(x) = frackx^22\nendequation","category":"page"},{"location":"odes/#","page":"Ordinary differential equations","title":"Ordinary differential equations","text":"(Image: Hooke's law and harmonic potential)","category":"page"},{"location":"odes/#","page":"Ordinary differential equations","title":"Ordinary differential equations","text":"However, since the restoring force is linear, the potential can at most be quadratic; furthermore, we only need one interval to solve the problem exactly:","category":"page"},{"location":"odes/#","page":"Ordinary differential equations","title":"Ordinary differential equations","text":"julia> cF,cV = ode_hookes_law(3, 0.1, 3, 1)\n([-0.15, -0.3], [-2.77556e-17, 0.45])","category":"page"},{"location":"odes/#","page":"Ordinary differential equations","title":"Ordinary differential equations","text":"(Image: Hooke's law and harmonic potential)","category":"page"},{"location":"odes/#","page":"Ordinary differential equations","title":"Ordinary differential equations","text":"note: Note\nOther boundary conditions, such as y(a)=alpha, or y(a)=beta, do not yet have a simple implementation. This mean that it is not convenient (but not impossible) to solve boundary-value problems with other boundary conditions than y(a)=y(b)=0, or initial-value problems with other initial values than y(a)=0.","category":"page"},{"location":"operators/#Approximating-operators-1","page":"Approximating operators","title":"Approximating operators","text":"","category":"section"},{"location":"operators/#","page":"Approximating operators","title":"Approximating operators","text":"As mentioned in Solving equations, the action of a linear operator on a spline can be approximated by projecting the operator into the space spaceP_tk: matLdefd B^HoperatorLB. We can employ this for different kinds of operators; out-of-the-box, BSplinesQuasi.jl supports differential operators and diagonal operators:","category":"page"},{"location":"operators/#Differential-operators-1","page":"Approximating operators","title":"Differential operators","text":"","category":"section"},{"location":"operators/#","page":"Approximating operators","title":"Approximating operators","text":"In the ContinuumArrays framework, differential operators are represented by the Derivative operator, which operates in a domain (typically the first axis of an ContinuumArrays.QuasiArrays.AbstractQuasiMatrix, e.g. a ContinuumArrays.Basis such as BSpline):","category":"page"},{"location":"operators/#","page":"Approximating operators","title":"Approximating operators","text":"julia> using BSplinesQuasi\n\njulia> B = BSpline(LinearKnotSet(3, 0, 1, 3))\nBSpline{Float64} basis with LinearKnotSet(Float64) of order k = 3 (parabolic) on 0.0..1.0 (3 intervals)\n\njulia> D = Derivative(axes(B,1))\nDerivative{Float64,IntervalSets.Interval{:closed,:closed,Float64}}(ContinuumArrays.QuasiArrays.Inclusion{Float64,IntervalSets.Interval{:closed,:closed,Float64}}(0.0..1.0))","category":"page"},{"location":"operators/#","page":"Approximating operators","title":"Approximating operators","text":"The derivative operator can then be projected into the space generated by the knot set t by","category":"page"},{"location":"operators/#","page":"Approximating operators","title":"Approximating operators","text":"julia> ∇ = B'D*B\n5×5 BandedMatrix{Float64,Array{Float64,2},Base.OneTo{Int64}}:\n -0.5         0.416667      0.0833333      ⋅            ⋅\n -0.416667    2.07997e-17   0.375         0.0416667     ⋅\n -0.0833333  -0.375         7.84759e-17   0.375        0.0833333\n   ⋅         -0.0416667    -0.375        -1.31839e-16  0.416667\n   ⋅           ⋅           -0.0833333    -0.416667     0.5","category":"page"},{"location":"operators/#Diagonal-operators-1","page":"Approximating operators","title":"Diagonal operators","text":"","category":"section"},{"location":"operators/#","page":"Approximating operators","title":"Approximating operators","text":"Diagonal operators are operators that only depend on the coordinate; they are also called local operators. Typical examples are potentials, such as the Coulomb potential V(x) = Qx, generated by a charge Q. This potential is not polynomial, i.e. we cannot compute its matrix elements exactly using Gauß–Legendre quadrature, but with high enough order and intelligent placement of the knots, we can get sufficient accuracy.","category":"page"},{"location":"operators/#","page":"Approximating operators","title":"Approximating operators","text":"Diagonal operators are projected into the B-spline space using the Matrix function:","category":"page"},{"location":"operators/#","page":"Approximating operators","title":"Approximating operators","text":"LinearAlgebra.Matrix","category":"page"},{"location":"operators/#Base.Matrix","page":"Approximating operators","title":"Base.Matrix","text":"Matrix(f, B)\n\nGenerate the matrix representing the diagonal operator f in the B-spline space B.\n\nExamples\n\njulia> Matrix(x -> x, BSpline(LinearKnotSet(3, 0, 1, 3)))\n5×5 BandedMatrices.BandedMatrix{Float64,Array{Float64,2},Base.OneTo{Int64}}:\n 0.0037037    0.00462963  0.000925926   ⋅           ⋅\n 0.00462963   0.0259259   0.0236111    0.00138889   ⋅\n 0.000925926  0.0236111   0.0916667    0.0458333   0.00462963\n  ⋅           0.00138889  0.0458333    0.0851852   0.0342593\n  ⋅            ⋅          0.00462963   0.0342593   0.062963\n\n\n\n\n\n","category":"type"},{"location":"operators/#","page":"Approximating operators","title":"Approximating operators","text":"As as example of the importance of knot placement, we study the action of the Coulomb operator operatorV(x) = -1x on the function f(x)=x^2exp(-x); we know that the result should be g(x)=operatorV(x)f(x)=-xexp(-x):","category":"page"},{"location":"operators/#","page":"Approximating operators","title":"Approximating operators","text":"julia> k = 7\n7\n\njulia> N = 31\n31\n\njulia> a,b = 0,70\n(0, 70)\n\njulia> coulomb(r) = -1/r\ncoulomb (generic function with 1 method)\n\njulia> tlin = LinearKnotSet(k, a, b, N);\n\njulia> texp = ExpKnotSet(k, -1.0, log10(b), N);\n\njulia> Blin = BSpline(tlin,3)[:,2:end-1]\nBSpline{Float64} basis with LinearKnotSet(Float64) of order k = 7 on 0.0..70.0 (31 intervals), restricted to basis functions 2..36 ⊂ 1..37\n\njulia> Bexp = BSpline(texp,3)[:,2:end-1]\nBSpline{Float64} basis with ExpKnotSet(Float64) of  on order k = 7 on 0,0.1..70.00000000000001 (31 intervals), restricted to basis functions 2..36 ⊂ 1..37","category":"page"},{"location":"operators/#","page":"Approximating operators","title":"Approximating operators","text":"Then, for B=Blin and B=Bexp, we do the following:","category":"page"},{"location":"operators/#","page":"Approximating operators","title":"Approximating operators","text":"S = B'B\nf = B \\ x -> x^2*exp(-x)\nV = Matrix(coulomb, B)\ng̃ = S \\ V*f","category":"page"},{"location":"operators/#","page":"Approximating operators","title":"Approximating operators","text":"and obtain two different approximations g̃ to g(x), as shown in the following plot:","category":"page"},{"location":"operators/#","page":"Approximating operators","title":"Approximating operators","text":"(Image: Coulomb operator)","category":"page"},{"location":"usage/#Usage-1","page":"Basis creation","title":"Usage","text":"","category":"section"},{"location":"usage/#","page":"Basis creation","title":"Basis creation","text":"We first load the package","category":"page"},{"location":"usage/#","page":"Basis creation","title":"Basis creation","text":"using BSplinesQuasi","category":"page"},{"location":"usage/#","page":"Basis creation","title":"Basis creation","text":"Then we define a linearly spaced knot set between 0 and 1 with five intervals and cubic splines. By default, full multiplicity of the endpoints is assumed.","category":"page"},{"location":"usage/#","page":"Basis creation","title":"Basis creation","text":"julia> t = LinearKnotSet(4, 0, 1, 5)\n12-element LinearKnotSet{4,4,4,Float64,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}:\n 0.0\n 0.0\n 0.0\n 0.0\n 0.2\n 0.4\n 0.6\n 0.8\n 1.0\n 1.0\n 1.0\n 1.0\n\njulia> B = BSpline(t)\nBSpline{Float64} basis with LinearKnotSet(Float64) of order k = 4 (cubic) on 0.0..1.0 (5 intervals)\n\njulia> size(B)\n(ContinuumArrays.AlephInfinity{1}(), 8)","category":"page"},{"location":"usage/#","page":"Basis creation","title":"Basis creation","text":"The last statement means that B is a quasimatrix with a continuous first dimension which is spanned by 8 basis functions.","category":"page"},{"location":"usage/#Evaluation-of-B-splines-1","page":"Basis creation","title":"Evaluation of B-splines","text":"","category":"section"},{"location":"usage/#","page":"Basis creation","title":"Basis creation","text":"It is the possible to query the values of e.g. the first basis functions at some values of x:","category":"page"},{"location":"usage/#","page":"Basis creation","title":"Basis creation","text":"julia> B[0:0.1:1,1]\n11-element SparseArrays.SparseVector{Float64,Int64} with 2 stored entries:\n  [1 ]  =  1.0\n  [2 ]  =  0.125","category":"page"},{"location":"usage/#","page":"Basis creation","title":"Basis creation","text":"We can also evaluate all the B-splines at the same time:","category":"page"},{"location":"usage/#","page":"Basis creation","title":"Basis creation","text":"julia> B[0:0.25:1,:]\n5×8 SparseArrays.SparseMatrixCSC{Float64,Int64} with 14 stored entries:\n  [1, 1]  =  1.0\n  [2, 2]  =  0.105469\n  [2, 3]  =  0.576823\n  [3, 3]  =  0.0208333\n  [2, 4]  =  0.315104\n  [3, 4]  =  0.479167\n  [4, 4]  =  0.00260417\n  [2, 5]  =  0.00260417\n  [3, 5]  =  0.479167\n  [4, 5]  =  0.315104\n  [3, 6]  =  0.0208333\n  [4, 6]  =  0.576823\n  [4, 7]  =  0.105469\n  [5, 8]  =  1.0","category":"page"},{"location":"usage/#","page":"Basis creation","title":"Basis creation","text":"Since the B-splines have compact support, they are only locally non-zero, hence the sparse storage.","category":"page"},{"location":"usage/#","page":"Basis creation","title":"Basis creation","text":"Finally, we can compute the value of a single B-spline, a range, or all of them at a single point x:","category":"page"},{"location":"usage/#","page":"Basis creation","title":"Basis creation","text":"julia> B[0.5,4]\n0.47916666666666674\n\njulia> B[0.5,:]\n8-element Array{Float64,1}:\n 0.0\n 0.0\n 0.020833333333333325\n 0.47916666666666674\n 0.4791666666666666\n 0.020833333333333322\n 0.0\n 0.0\n\njulia> B[0.5,4:8]\n5-element Array{Float64,1}:\n 0.47916666666666674\n 0.4791666666666666\n 0.020833333333333322\n 0.0\n 0.0","category":"page"},{"location":"function_approximation/#Function-approximation-1","page":"Function approximation","title":"Function approximation","text":"","category":"section"},{"location":"function_approximation/#","page":"Function approximation","title":"Function approximation","text":"To approximate a mathematical function on a B-spline basis, we can simply solve for the coefficients:","category":"page"},{"location":"function_approximation/#","page":"Function approximation","title":"Function approximation","text":"julia> t = LinearKnotSet(7, 0, 7, 10);\n\njulia> B = BSpline(t)\nBSpline{Float64} basis with LinearKnotSet(Float64) of order k = 7 on 0.0..7.0 (10 intervals)\n\njulia> c = B \\ sin\n16-element Array{Float64,1}:\n  3.674947319163227e-7\n  0.1166649763895669\n  0.3500043164970867\n  0.6828451145424481\n  1.0237038168861594\n  1.1358262863822566\n  0.7361804983706153\n -0.009705277902046651\n -0.7510239693627963\n -1.139127153806961\n -0.991477377385712\n -0.4798514317407342\n  0.024153163433647172\n  0.3716550472969573\n  0.5690327347258564\n  0.6569863188695337","category":"page"},{"location":"function_approximation/#","page":"Function approximation","title":"Function approximation","text":"The top panel shows the expansion coefficents and the reconstructed function, the middle panel the reconstruction error, and the bottom panel the underlying basis functions.","category":"page"},{"location":"function_approximation/#","page":"Function approximation","title":"Function approximation","text":"(Image: Function interpolation by B-splines)","category":"page"},{"location":"function_approximation/#","page":"Function approximation","title":"Function approximation","text":"Since the sine function is non-zero at x=7, it is important that our basis set includes a B-spline that supports this, hence the full multiplicity of last knot. The sine function is zero at the first knot, however, something that is reflected in the fact that the first expansion coefficient is almost zero. In problems where vanishing boundary conditions are stipulated, this can be enforced by dropping the first/last spline:","category":"page"},{"location":"function_approximation/#","page":"Function approximation","title":"Function approximation","text":"julia> t = LinearKnotSet(7, 0.0, 1.0, 6);\n\njulia> B = BSpline(t,3)\nBSpline{Float64} basis with LinearKnotSet(Float64) of order k = 7 on 0.0..1.0 (6 intervals)\n\njulia> B̃ = B[:,2:end-1]\nBSpline{Float64} basis with LinearKnotSet(Float64) of order k = 7 on 0.0..1.0 (6 intervals), restricted to basis functions 2..11 ⊂ 1..12","category":"page"},{"location":"function_approximation/#","page":"Function approximation","title":"Function approximation","text":"We can now compare how well the restricted basis can reconstruct different functions, compared to the unrestricted one:","category":"page"},{"location":"function_approximation/#","page":"Function approximation","title":"Function approximation","text":"julia> f1 = x -> sin(2π*x)\n#121 (generic function with 1 method)\n\njulia> f2 = x -> cos(2π*x)\n#123 (generic function with 1 method)\n\njulia> c1 = B \\ f1\n12-element Array{Float64,1}:\n  8.595306123332097e-6\n  0.17449541085301523\n  0.5236843390613484\n  0.9897088684171409\n  1.265948043821677\n  0.6905122508504199\n -0.6905122508504197\n -1.2659480438216766\n -0.9897088684171416\n -0.5236843390613481\n -0.1744954108530153\n -8.59530612374404e-6\n\njulia> c2 = B \\ f2\n12-element Array{Float64,1}:\n  0.9999984763007934\n  1.000010902252537\n  0.9268416666707764\n  0.5980612634315096\n -0.1993704588377225\n -1.1959917207779527\n -1.195991720777952\n -0.1993704588377244\n  0.5980612634315112\n  0.9268416666707747\n  1.000010902252537\n  0.9999984763007937\n\njulia> c̃1 = B̃ \\ f1\n10-element Array{Float64,1}:\n  0.17450648562854001\n  0.5236722006849034\n  0.9897209715549453\n  1.2659362792307434\n  0.6905240028400118\n -0.690524002840012\n -1.265936279230742\n -0.989720971554948\n -0.5236722006849018\n -0.1745064856285418\n\njulia> c̃2 = B̃ \\ f2\n10-element Array{Float64,1}:\n  2.1869627421644986\n -0.18872692489766923\n  1.4520927974960849\n -0.6709944899983972\n -1.057228429296141\n -1.057228429296146\n -0.6709944899983946\n  1.4520927974960847\n -0.1887269248976696\n  2.1869627421644977","category":"page"},{"location":"function_approximation/#","page":"Function approximation","title":"Function approximation","text":"(Image: Reconstruction of function interpolated on restricted bases)","category":"page"},{"location":"function_approximation/#","page":"Function approximation","title":"Function approximation","text":"As is to be expected, the sine function is perfectly reconstructed in both cases, whilst the cosine fails spectactularly in the restricted case.","category":"page"},{"location":"function_approximation/#Smooth-interpolation-of-measurement-data-1","page":"Function approximation","title":"Smooth interpolation of measurement data","text":"","category":"section"},{"location":"function_approximation/#","page":"Function approximation","title":"Function approximation","text":"If instead of a mathematical function, we have a dataset that we wish to interpolate smoothly, we accomplish that quite simply by evaluating the B-splines on the values of x where we know the data. We must beware of overfitting though, which is illustrated below. First, we generate some “measurement” data:","category":"page"},{"location":"function_approximation/#","page":"Function approximation","title":"Function approximation","text":"julia> f = x -> sin(2π*x)\n#9 (generic function with 1 method)\n\njulia> rng = MersenneTwister(123);\n\njulia> N = 10\n10\n\njulia> x = clamp.(sort(range(0, stop=1, length=N) + 0.1(2rand(rng,N) .- 1)), 0, 1);\n\njulia> y = f.(x) + 0.1(2rand(rng,N) .- 1);","category":"page"},{"location":"function_approximation/#","page":"Function approximation","title":"Function approximation","text":"We then construct two B-splines sets of different orders, but on the same domain:","category":"page"},{"location":"function_approximation/#","page":"Function approximation","title":"Function approximation","text":"julia> t3 = LinearKnotSet(3, 0.0, 1.0, 6);\n\njulia> t4 = LinearKnotSet(4, 0.0, 1.0, 6);\n\njulia> B3 = BSpline(t3,0)\nBSpline{Float64} basis with LinearKnotSet(Float64) of order k = 3 (parabolic) on 0.0..1.0 (6 intervals)\n\njulia> B4 = BSpline(t4,0)\nBSpline{Float64} basis with LinearKnotSet(Float64) of order k = 4 (cubic) on 0.0..1.0 (6 intervals)\n\njulia> c3 = B3[x,:] \\ y\n8-element Array{Float64,1}:\n  0.09059408654085727\n  0.3193964537812517\n  1.2724504917348318\n  0.48266890171285365\n -0.5585179917405891\n -1.2049827692771158\n -0.5094743222571649\n -0.27749270716604346\n\njulia> c4 = B4[x,:] \\ y\n9-element Array{Float64,1}:\n  2.32388044050468\n -1.1504112365148684\n  1.4118937176980075\n  0.9380508194440034\n  0.005584178064480077\n -1.060186123070226\n -1.1044261039469099\n -0.1538696429680995\n -1.00556852643735","category":"page"},{"location":"function_approximation/#","page":"Function approximation","title":"Function approximation","text":"(Image: Smooth interpolation)","category":"page"},{"location":"#BSplinesQuasi.jl-1","page":"Home","title":"BSplinesQuasi.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"BSplinesQuasi is a package for B-splines in the framework of ContinuumArrays","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Image: BSplinesQuasi logo)","category":"page"},{"location":"#Index-of-types-and-functions-1","page":"Home","title":"Index of types and functions","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Modules = [BSplinesQuasi]","category":"page"},{"location":"knot_sets/#Knot-sets-1","page":"Knot sets","title":"Knot sets","text":"","category":"section"},{"location":"knot_sets/#","page":"Knot sets","title":"Knot sets","text":"Three built-in knot sets are provided out-of-the-box:","category":"page"},{"location":"knot_sets/#Arbitrary-knot-set-1","page":"Knot sets","title":"Arbitrary knot set","text":"","category":"section"},{"location":"knot_sets/#","page":"Knot sets","title":"Knot sets","text":"Arbitrary knot sets allow custom placement of the individual knots, as well as custom multiplicity of interior knots. This can be used for problems where discontinuity at a certain location is desired.","category":"page"},{"location":"knot_sets/#","page":"Knot sets","title":"Knot sets","text":"ArbitraryKnotSet\nArbitraryKnotSet(k::Integer, t::AbstractVector, ml::Integer=k, mr::Integer=k)","category":"page"},{"location":"knot_sets/#BSplinesQuasi.ArbitraryKnotSet","page":"Knot sets","title":"BSplinesQuasi.ArbitraryKnotSet","text":"ArbitraryKnotSet{k,ml,mr}(t)\n\nAn arbitrary knot set of order k and left and right multiplicities of ml and mr, respectively. The knot set is specified by the non-decreasing vector t; the same knot may appear multiple times, which influences the continuity of the B-splines at that location.\n\n\n\n\n\n","category":"type"},{"location":"knot_sets/#BSplinesQuasi.ArbitraryKnotSet","page":"Knot sets","title":"BSplinesQuasi.ArbitraryKnotSet","text":"ArbitraryKnotset(k, t[, ml=k, mr=k])\n\nConstruct an order-k arbitrary knot set, with the locations of the knots given by non-decreasing vector t.\n\n\n\n\n\n","category":"type"},{"location":"knot_sets/#Linear-knot-set-1","page":"Knot sets","title":"Linear knot set","text":"","category":"section"},{"location":"knot_sets/#","page":"Knot sets","title":"Knot sets","text":"LinearKnotSet\nLinearKnotSet(k::Integer, a, b, N::Integer, ml::Integer=k, mr::Integer=k)","category":"page"},{"location":"knot_sets/#BSplinesQuasi.LinearKnotSet","page":"Knot sets","title":"BSplinesQuasi.LinearKnotSet","text":"LinearKnotSet{k,ml,mr}(t)\n\nA knot set of order k and left and right multiplicities of ml and mr, respectively, whose knots are uniformly distributed according to the range t. The interior basis functions are thus Cᵏ⁻²-continuous.\n\n\n\n\n\n","category":"type"},{"location":"knot_sets/#BSplinesQuasi.LinearKnotSet","page":"Knot sets","title":"BSplinesQuasi.LinearKnotSet","text":"LinearKnotSet(k, a, b, N[, ml=k, mr=k])\n\nConstruct an order-k linear knot set spanning from a to b, with N intervals.\n\nExamples\n\njulia> LinearKnotSet(2, 0, 1, 3)\n6-element LinearKnotSet{2,2,2,Float64,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}:\n 0.0\n 0.0\n 0.3333333333333333\n 0.6666666666666666\n 1.0\n 1.0\n\n\n\n\n\n","category":"type"},{"location":"knot_sets/#Exponential-knot-set-1","page":"Knot sets","title":"Exponential knot set","text":"","category":"section"},{"location":"knot_sets/#","page":"Knot sets","title":"Knot sets","text":"Exponential knot sets are useful for approximating exponentially varying functions (e.g. bound states of atoms). The quadrature points of each interval are distributed as were the knot set piecewise linear.","category":"page"},{"location":"knot_sets/#","page":"Knot sets","title":"Knot sets","text":"ExpKnotSet\nExpKnotSet(k::Integer, a::T, b::T, N::Integer, ml::Integer=k, mr::Integer=k; base::T=T(10), include0::Bool=true) where T","category":"page"},{"location":"knot_sets/#BSplinesQuasi.ExpKnotSet","page":"Knot sets","title":"BSplinesQuasi.ExpKnotSet","text":"ExpKnotSet{k,ml,mr}(exponents, base, t, include0)\n\nA knot set of order k and left and right multiplicities of ml and mr, respectively, whose knots are exponentially distributed according to t = base .^ exponents, optionally including 0 as the left endpoint.\n\n\n\n\n\n","category":"type"},{"location":"knot_sets/#BSplinesQuasi.ExpKnotSet-Union{Tuple{T}, Tuple{Integer,T,T,Integer}, Tuple{Integer,T,T,Integer,Integer}, Tuple{Integer,T,T,Integer,Integer,Integer}} where T","page":"Knot sets","title":"BSplinesQuasi.ExpKnotSet","text":"ExpKnotsSet(k, a, b, N[, ml=k, mr=k, base=10, include0=true])\n\nConstruct an order-k knot spanning from base^a to base^b in N intervals, optionally including 0 as the left endpoint.\n\nExamples\n\njulia> ExpKnotSet(2, -4, 2, 7)\n10-element ExpKnotSet{2,2,2,Float64,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},Array{Float64,1}}:\n   0.0\n   0.0\n   0.0001\n   0.001\n   0.01\n   0.1\n   1.0\n  10.0\n 100.0\n 100.0\n\n\n\n\n\n","category":"method"},{"location":"knot_sets/#Reference-1","page":"Knot sets","title":"Reference","text":"","category":"section"},{"location":"knot_sets/#","page":"Knot sets","title":"Knot sets","text":"order\nnumintervals\nnumfunctions\nfirst\nlast\nlength\ngetindex\nnonempty_intervals","category":"page"},{"location":"knot_sets/#BSplinesQuasi.order","page":"Knot sets","title":"BSplinesQuasi.order","text":"order(t)\n\nReturns the order k of the knot set t.\n\n\n\n\n\n","category":"function"},{"location":"knot_sets/#BSplinesQuasi.numintervals","page":"Knot sets","title":"BSplinesQuasi.numintervals","text":"numinterval(t)\n\nReturns the number of intervals generated by the knot set t.\n\nExamples\n\njulia> numintervals(LinearKnotSet(3, 0, 1, 2))\n2\n\n\n\n\n\n","category":"function"},{"location":"knot_sets/#BSplinesQuasi.numfunctions","page":"Knot sets","title":"BSplinesQuasi.numfunctions","text":"numfunctions(t)\n\nReturns the number of basis functions generated by knot set t.\n\nExamples\n\njulia> numfunctions(LinearKnotSet(3, 0, 1, 2))\n4\n\njulia> numfunctions(LinearKnotSet(5, 0, 1, 2))\n6\n\n\n\n\n\n","category":"function"},{"location":"knot_sets/#Base.first","page":"Knot sets","title":"Base.first","text":"first(t)\n\nReturn the first knot of t.\n\n\n\n\n\n","category":"function"},{"location":"knot_sets/#Base.last","page":"Knot sets","title":"Base.last","text":"last(t)\n\nReturn the last knot of t.\n\n\n\n\n\n","category":"function"},{"location":"knot_sets/#Base.length","page":"Knot sets","title":"Base.length","text":"length(t)\n\nReturn the number of knots of t.\n\nExamples\n\njulia> length(LinearKnotSet(3, 0, 1, 3))\n8\n\njulia> length(LinearKnotSet(3, 0, 1, 3, 1, 1))\n4\n\n\n\n\n\n","category":"function"},{"location":"knot_sets/#Base.getindex","page":"Knot sets","title":"Base.getindex","text":"getindex(t, i)\n\nReturn the ith knot of the knot set t, accounting for the multiplicities of the endpoints.\n\nExamples\n\njulia> LinearKnotSet(3, 0, 1, 3)[2]\n0.0\n\njulia> LinearKnotSet(3, 0, 1, 3, 1, 1)[2]\n0.3333333333333333\n\n\n\n\n\n","category":"function"},{"location":"knot_sets/#BSplinesQuasi.nonempty_intervals","page":"Knot sets","title":"BSplinesQuasi.nonempty_intervals","text":"nonempty_intervals(t)\n\nReturn the indices of all intervals of the knot set t that are non-empty.\n\nExamples\n\njulia> nonempty_intervals(ArbitraryKnotSet(3, [0.0, 1, 1, 3, 4, 6], 1, 3))\n4-element Array{Int64,1}:\n 1\n 3\n 4\n 5\n\n\n\n\n\n","category":"function"},{"location":"knot_sets/#Internals-1","page":"Knot sets","title":"Internals","text":"","category":"section"},{"location":"knot_sets/#","page":"Knot sets","title":"Knot sets","text":"BSplinesQuasi.AbstractKnotSet\nBSplinesQuasi.assert_multiplicities\nBSplinesQuasi.leftmultiplicity\nBSplinesQuasi.rightmultiplicity\nBSplinesQuasi.find_interval\nBSplinesQuasi.within_interval\nBSplinesQuasi.within_support","category":"page"},{"location":"knot_sets/#BSplinesQuasi.AbstractKnotSet","page":"Knot sets","title":"BSplinesQuasi.AbstractKnotSet","text":"AbstractKnotSet{k,ml,mr,T}\n\nAbstract base for B-spline knot sets. T is the eltype of the knot set, k is the order of the piecewise polynomials (order = degree + 1) and ml and mr are the knot multiplicities of the left and right endpoints, respectively.  \n\n\n\n\n\n","category":"type"},{"location":"knot_sets/#BSplinesQuasi.assert_multiplicities","page":"Knot sets","title":"BSplinesQuasi.assert_multiplicities","text":"assert_multiplicities(k,ml,mr,t)\n\nAssert that the multiplicities at the endpoints, ml and mr, respectively, are consistent with the order k. Also check that the amount of knots in the knot set t are enough to support the requested order k.\n\n\n\n\n\n","category":"function"},{"location":"knot_sets/#BSplinesQuasi.leftmultiplicity","page":"Knot sets","title":"BSplinesQuasi.leftmultiplicity","text":"leftmultiplicity(t)\n\nReturn the multiplicity of the left endpoint.\n\n\n\n\n\n","category":"function"},{"location":"knot_sets/#BSplinesQuasi.rightmultiplicity","page":"Knot sets","title":"BSplinesQuasi.rightmultiplicity","text":"rightmultiplicity(t)\n\nReturn the multiplicity of the right endpoint.\n\n\n\n\n\n","category":"function"},{"location":"knot_sets/#BSplinesQuasi.find_interval","page":"Knot sets","title":"BSplinesQuasi.find_interval","text":"find_interval(t, x[, i=ml])\n\nFind the interval in the knot set t that includes x, starting from interval i (which by default is the first non-zero interval of the knot set). The search complexity is linear, but by storing the result and using it as starting point for the next call to find_interval, the knot set need only be traversed once.\n\n\n\n\n\n","category":"function"},{"location":"knot_sets/#BSplinesQuasi.within_interval","page":"Knot sets","title":"BSplinesQuasi.within_interval","text":"within_interval(x, interval)\n\nReturn the indices of the elements of x that lie within the given closed interval.\n\n\n\n\n\n","category":"function"},{"location":"knot_sets/#BSplinesQuasi.within_support","page":"Knot sets","title":"BSplinesQuasi.within_support","text":"within_support(x, t, j)\n\nReturn the indices of the elements of x that lie withing the compact support of the jth basis function (enumerated 1..n), given the knot set t. For each index of x that is covered, the index k of the interval within which x[i] falls is also returned.\n\n\n\n\n\n","category":"function"},{"location":"knot_sets/#Quadrature-functions-1","page":"Knot sets","title":"Quadrature functions","text":"","category":"section"},{"location":"knot_sets/#","page":"Knot sets","title":"Knot sets","text":"Gauß–Legendre quadrature can be used to exactly calculate integrals of polynomials, and very accurately the integrals of smoothly varying functions. The approximation is given by","category":"page"},{"location":"knot_sets/#","page":"Knot sets","title":"Knot sets","text":"beginequation\nintlimits_a^b diffxf(x)approx\nfracb-a2sum_i=1^n w_i\nfleft(fracb-a2x_i+fraca+b2right)\nendequation","category":"page"},{"location":"knot_sets/#","page":"Knot sets","title":"Knot sets","text":"where x_i are the roots of the quadrature and w_i the corresponding weights, given on the elementary interval -11.","category":"page"},{"location":"knot_sets/#","page":"Knot sets","title":"Knot sets","text":"BSplinesQuasi.num_quadrature_points\nBSplinesQuasi.lgwt!\nBSplinesQuasi.lgwt","category":"page"},{"location":"knot_sets/#BSplinesQuasi.num_quadrature_points","page":"Knot sets","title":"BSplinesQuasi.num_quadrature_points","text":"num_quadrature_points(k, k′)\n\nThe number of quadrature points needed to exactly compute the matrix elements of an operator of polynomial order k′ with respect to a basis of order k.\n\n\n\n\n\n","category":"function"},{"location":"knot_sets/#BSplinesQuasi.lgwt!","page":"Knot sets","title":"BSplinesQuasi.lgwt!","text":"lgwt!(x, w, xs, ws[, a=0, b=1])\n\nTransform the Gauß–Legendre roots x and weights w on the elementary interval [-1,1] to the interval [a,b] and store the result in xs and ws, respectively.\n\n\n\n\n\n","category":"function"},{"location":"knot_sets/#BSplinesQuasi.lgwt","page":"Knot sets","title":"BSplinesQuasi.lgwt","text":"lgwt(t, k′) -> (x,w)\n\nGenerate the Gauß–Legendre quadrature roots x and associated weights w necessary to compute matrix elements of a polynomial operator of order k′, with respect to the B-spline basis generated by the knot set t.\n\nExamples\n\njulia> BSplinesQuasi.lgwt(LinearKnotSet(2, 0, 1, 3), 1)\n([0.0704416, 0.262892, 0.403775, 0.596225, 0.737108, 0.929558], [0.166667, 0.166667, 0.166667, 0.166667, 0.166667, 0.166667])\n\njulia> BSplinesQuasi.lgwt(ExpKnotSet(2, -4, 2, 7), 1)\n([2.11325e-5, 7.88675e-5, 0.000290192, 0.000809808, 0.00290192, 0.00809808, 0.0290192, 0.0809808, 0.290192, 0.809808, 2.90192, 8.09808, 29.0192, 80.9808], [5.0e-5, 5.0e-5, 0.00045, 0.00045, 0.0045, 0.0045, 0.045, 0.045, 0.45, 0.45, 4.5, 4.5, 45.0, 45.0])\n\n\n\n\n\n","category":"function"}]
}
